useState:
목적: 컴포넌트 내에서 상태(state)를 관리하기 위해 사용됩니다.
사용 사례: 컴포넌트 내에서 상태(예: 변수, 객체, 배열)를 생성하고, 상태 값을 변경할 때 사용합니다. 컴포넌트의 동적인 데이터를 저장하고 업데이트할 때 유용합니다.
import React, { useState } from 'react';

function Counter() {
  const [count, setCount] = useState(0);

  const increment = () => {
    setCount(count + 1);
  };

  const decrement = () => {
    setCount(count - 1);
  };

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={increment}>Increment</button>
      <button onClick={decrement}>Decrement</button>
    </div>
  );
}

export default Counter;


useEffect:
목적: 부수 효과(side effect)를 다루기 위해 사용됩니다. 부수 효과는 컴포넌트 외부의 데이터 가져오기, DOM 조작, 데이터 저장 등의 작업을 의미합니다.
사용 사례: 컴포넌트가 렌더링될 때 또는 특정 상태가 변경될 때 특정 작업을 수행하고자 할 때 사용합니다. 예를 들어, 데이터 가져오기, 이벤트 처리, 타이머 설정 등이 부수 효과의 예입니다.
import React, { useState, useEffect } from 'react';

function TitleUpdater() {
  const [title, setTitle] = useState('기본 제목');

  useEffect(() => {
    document.title = title;
  }, [title]);

  const handleChangeTitle = (newTitle) => {
    setTitle(newTitle);
  };

  return (
    <div>
      <p>현재 제목: {title}</p>
      <input
        type="text"
        value={title}
        onChange={(e) => handleChangeTitle(e.target.value)}
      />
    </div>
  );
}

export default TitleUpdater;

useContext:
목적: 컴포넌트 간에 데이터를 공유하기 위해 사용됩니다. 특히, 컴포넌트 계층 구조에서 데이터를 효율적으로 전달하고 공유하기 위한 목적으로 사용됩니다.
사용 사례: 공통된 데이터, 설정, 상태를 여러 컴포넌트에서 공유하고자 할 때 사용합니다. 예를 들어, 사용자 인증 상태, 애플리케이션 설정, 테마, 언어 등을 컴포넌트 간에 전달하고 공유할 때 유용합니다.
import React, { useState, useContext } from 'react';

const MyContext = React.createContext();

function DataProvider({ children }) {
  const [data, setData] = useState('기본 데이터');

  return (
    <MyContext.Provider value={{ data, setData }}>
      {children}
    </MyContext.Provider>
  );
}

function DataConsumer() {
  const { data, setData } = useContext(MyContext);

  return (
    <div>
      <p>공유 데이터: {data}</p>
      <button onClick={() => setData('새로운 데이터')}>데이터 업데이트</button>
    </div>
  );
}

function DataSharingApp() {
  return (
    <DataProvider>
      <DataConsumer />
    </DataProvider>
  );
}

export default DataSharingApp;

요약하면, 
useState는 컴포넌트의 상태 관리에 사용되며, 
useEffect는 부수 효과 처리를 위해 사용되며, 
useContext는 컴포넌트 간 데이터 공유에 사용됩니다. 
이 세 가지 훅은 React 애플리케이션을 더 효과적으로 작성하고 관리하는 데 도움이 됩니다.





